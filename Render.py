{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1409c3ba-f542-46af-9f17-971927555c42",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <iframe\n",
       "            width=\"100%\"\n",
       "            height=\"650\"\n",
       "            src=\"http://127.0.0.1:8070/\"\n",
       "            frameborder=\"0\"\n",
       "            allowfullscreen\n",
       "            \n",
       "        ></iframe>\n",
       "        "
      ],
      "text/plain": [
       "<IPython.lib.display.IFrame at 0x25c16bc2450>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "dataset = pd.read_excel(\"Scatterplot V5 revDM.xlsx\", sheet_name=\"1. Levels\")\n",
    "\n",
    "import numpy as np\n",
    "dataset['Worker density'] = dataset['Worker density'].round(0)\n",
    "dataset['Batch area'] = dataset['Batch area'].round(0)\n",
    "dataset['Number of workers'] = dataset['Number of workers'].round(0)\n",
    "dataset['GIA'] = dataset['GIA'].round(0)\n",
    "dataset['Planned production rate'] = dataset['Planned production rate'].round(0)\n",
    "dataset['Actual production rate'] = dataset['Actual production rate'].round(0)\n",
    "dataset['Labour productivity'] = dataset['Labour productivity'].round(2)\n",
    "dataset['Cycle time'] = dataset['Cycle time'].round(0)\n",
    "dataset['Actual duration'] = np.ceil(dataset['Actual duration']).astype(int)\n",
    "\n",
    "import dash\n",
    "from dash import dcc, html, Input, Output, State\n",
    "import plotly.express as px\n",
    "import pandas as pd\n",
    "import plotly.io as pio\n",
    "\n",
    "\n",
    "# Initialize Dash app\n",
    "app = dash.Dash(__name__)\n",
    "\n",
    "frame_sorted = dataset.sort_values(by='Frame')\n",
    "\n",
    "# Layout\n",
    "app.layout = html.Div([\n",
    "    dcc.Dropdown(\n",
    "        id='worker-filter',\n",
    "        options=[{'label': str(worker), 'value': worker} for worker in sorted(frame_sorted['Avg number of workers'].unique())],\n",
    "        placeholder=\"Select Average Number of Workers\",\n",
    "        multi=False,\n",
    "        style={\n",
    "        'width': '50%',         # Adjust dropdown width (e.g., 50% of container)\n",
    "        #'fontSize': '14px',     # Reduce font size\n",
    "        #'height': '35px',       # Adjust height\n",
    "        #'padding': '3px',       # Reduce inner padding\n",
    "        #'minHeight': '30px',    # Minimum height of the dropdown\n",
    "    }\n",
    "    ),\n",
    "    dcc.Graph(id='scatter-plot'),\n",
    "    html.Button(\"Download HTML\", id=\"download-btn\", n_clicks=0),\n",
    "    dcc.Download(id=\"download\")\n",
    "])\n",
    "\n",
    "# Callback to update scatter plot\n",
    "@app.callback(\n",
    "    Output('scatter-plot', 'figure'),\n",
    "    [Input('worker-filter', 'value')]\n",
    ")\n",
    "def update_graph(selected_workers):\n",
    "    filtered_data = frame_sorted if selected_workers is None else frame_sorted[frame_sorted['Avg number of workers'] == selected_workers]\n",
    "    \n",
    "    fig = px.scatter(\n",
    "        filtered_data, \n",
    "        x='Actual production rate', \n",
    "        y='Labour productivity',\n",
    "        title='<b>Superstructure: Labour productivity v Production rate<b>',\n",
    "        range_x=[0, 130], \n",
    "        range_y=[0, 0.9], \n",
    "        color='Frame',\n",
    "        template='seaborn',\n",
    "        color_discrete_sequence=px.colors.qualitative.Dark24,\n",
    "        hover_data=['Building ID','Level','Frame','Actual duration','Cycle time','GIA','Batch area',\n",
    "                    'Pours','Cranes','Worker density','Number of workers'],\n",
    "        opacity=0.9\n",
    "    )\n",
    "    fig.update_traces(marker=dict(size=10))\n",
    "    fig.update_layout(xaxis_title='Production rate (m\\N{SUPERSCRIPT TWO}/day)',\n",
    "                      yaxis_title='Labour productivity (m\\N{SUPERSCRIPT TWO}/worker-hour)')\n",
    "    fig.update_layout(\n",
    "        xaxis=dict(tickfont=dict(size=18), dtick=10),\n",
    "        yaxis=dict(tickfont=dict(size=18)),\n",
    "        legend=dict(font=dict(size=18)),\n",
    "        font=dict(family=\"Calibri\")\n",
    "        )\n",
    "    fig.update_layout(template=\"seaborn\")\n",
    "    fig.update_layout(height=600, width=1000)\n",
    "    fig.update_layout(title_font=dict(size=24),\n",
    "                      xaxis_title_font=dict(size=21), \n",
    "                      yaxis_title_font=dict(size=21))\n",
    "    fig.update_layout(plot_bgcolor='rgb(240, 240, 240)') \n",
    "    \n",
    "    return fig\n",
    "\n",
    "# Callback to generate and download the HTML file\n",
    "@app.callback(\n",
    "    Output(\"download\", \"data\"),\n",
    "    [Input(\"download-btn\", \"n_clicks\")],\n",
    "    [State(\"scatter-plot\", \"figure\")],\n",
    "    prevent_initial_call=True\n",
    ")\n",
    "def generate_html(n_clicks, figure):\n",
    "    return dict(content=pio.to_html(figure), filename=\"scatter_plot_output.html\")\n",
    "\n",
    "# Run the app\n",
    "if __name__ == '__main__':\n",
    "    app.run_server(debug=True, port=8070)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
